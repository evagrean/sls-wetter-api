language: node_js
node_js:
  - "12"
deploy_service_job: &DEPLOY_SERVICE_JOB
  cache:
    directories:
      - node_modules
      - ${SERVICE_PATH}/node_modules
install:
    - npm install -g serverless
    - travis_retry npm install
    - cd ${SERVICE_PATH}
    - travis_retry npm install
    - cd -
script:
    - cd ${SERVICE_PATH}
    - serverless deploy -s ${STAGE_NAME}
    - cd -
environments:
  - &PRODUCTION_ENV
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_PRODUCTION}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_PRODUCTION}
  - &DEVELOPMENT_ENV
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_DEVELOPMENT}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_DEVELOPMENT}
jobs:
  include:
    # develop and other non-master branches deploys to the 'dev' stage
    - <<: *DEPLOY_SERVICE_JOB
      name: "Deploy Wetter API"
      if: type = push AND NOT branch = master
      env:
        - SERVICE_PATH="wetter-api"
        - STAGE_NAME=dev
        - *DEVELOPMENT_ENV 

    # pull requests deploy to the 'prod' stage after merged into master
    # - <<: *DEPLOY_SERVICE_JOB
    #   name: "Deploy Wetter API"
    #   if: type = pull_request
    #   env:
    #     - SERVICE_PATH="wetter-api"
    #     - STAGE_NAME=prod
    #     - *PRODUCTION_ENV

    # master branch deploys to the 'prod' stage
    - <<: *DEPLOY_SERVICE_JOB
      name: "Deploy Prod Wetter API"
      if: type = push AND branch = master
      env:
        - SERVICE_PATH="wetter-api"
        - STAGE_NAME=prod
        - *PRODUCTION_ENV

